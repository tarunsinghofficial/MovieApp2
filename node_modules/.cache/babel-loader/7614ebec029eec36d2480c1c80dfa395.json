{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-movie\\\\src\\\\components\\\\hero-slide\\\\HeroSlide.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport SwiperCore, { Autoplay } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport Button, { OutlineButton } from '../button/Button';\nimport Modal, { ModalContent } from '../modal/Modal';\nimport tmdbApi, { category, movieType } from '../../api/tmdbApi';\nimport apiConfig from '../../api/apiConfig';\nimport './hero-slide.scss';\nimport { useHistory } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HeroSlide = () => {\n  _s();\n\n  SwiperCore.use([Autoplay]);\n  const [movieItems, setMovieItems] = useState([]);\n  useEffect(() => {\n    const getMovies = async () => {\n      const params = {\n        page: 1\n      };\n\n      try {\n        const response = await tmdbApi.getMoviesList(movieType.popular, {\n          params\n        });\n        setMovieItems(response.results.slice(1, 11));\n        console.log(response);\n      } catch {\n        console.log('error');\n      }\n    };\n\n    getMovies();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hero-slide\",\n    children: [/*#__PURE__*/_jsxDEV(Swiper, {\n      modules: [Autoplay],\n      grabCursor: true,\n      spaceBetween: 0,\n      slidesPerView: 1,\n      autoplay: {\n        delay: 3000\n      },\n      children: movieItems.map((item, i) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        children: ({\n          isActive\n        }) => /*#__PURE__*/_jsxDEV(HeroSlideItem, {\n          item: item,\n          className: `${isActive ? 'active' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 33\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), movieItems.map((item, i) => /*#__PURE__*/_jsxDEV(TrailerModal, {\n      item: item\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 45\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HeroSlide, \"v2ja/IALY/F/8AFwp1LDsPz/EqM=\");\n\n_c = HeroSlide;\n\nconst HeroSlideItem = props => {\n  _s2();\n\n  let hisrory = useHistory();\n  const item = props.item;\n  const background = apiConfig.originalImage(item.backdrop_path ? item.backdrop_path : item.poster_path);\n\n  const setModalActive = async () => {\n    const modal = document.querySelector(`#modal_${item.id}`);\n    const videos = await tmdbApi.getVideos(category.movie, item.id);\n\n    if (videos.results.length > 0) {\n      const videSrc = 'https://www.youtube.com/embed/' + videos.results[0].key;\n      modal.querySelector('.modal__content > iframe').setAttribute('src', videSrc);\n    } else {\n      modal.querySelector('.modal__content').innerHTML = 'No trailer';\n    }\n\n    modal.classList.toggle('active');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `hero-slide__item ${props.className}`,\n    style: {\n      backgroundImage: `url(${background})`\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hero-slide__item__content container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-slide__item__content__info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"title\",\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overview\",\n          children: item.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btns\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => hisrory.push('/movie/' + item.id),\n            children: \"Watch now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(OutlineButton, {\n            onClick: setModalActive,\n            children: \"Watch trailer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-slide__item__content__poster\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: apiConfig.w500Image(item.poster_path),\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(HeroSlideItem, \"JdRvKuhMmRWQtVv8IgVX1b80ssM=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = HeroSlideItem;\n\nconst TrailerModal = props => {\n  _s3();\n\n  const item = props.item;\n  const iframeRef = useRef(null);\n\n  const onClose = () => iframeRef.current.setAttribute('src', '');\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    active: false,\n    id: `modal_${item.id}`,\n    children: /*#__PURE__*/_jsxDEV(ModalContent, {\n      onClose: onClose,\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        ref: iframeRef,\n        width: \"100%\",\n        height: \"500px\",\n        title: \"trailer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(TrailerModal, \"HIHwOEFe13FUYgDPZ3BBEH738M4=\");\n\n_c3 = TrailerModal;\nexport default HeroSlide;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"HeroSlide\");\n$RefreshReg$(_c2, \"HeroSlideItem\");\n$RefreshReg$(_c3, \"TrailerModal\");","map":{"version":3,"sources":["D:/react-movie/src/components/hero-slide/HeroSlide.jsx"],"names":["React","useState","useEffect","useRef","SwiperCore","Autoplay","Swiper","SwiperSlide","Button","OutlineButton","Modal","ModalContent","tmdbApi","category","movieType","apiConfig","useHistory","HeroSlide","use","movieItems","setMovieItems","getMovies","params","page","response","getMoviesList","popular","results","slice","console","log","delay","map","item","i","isActive","HeroSlideItem","props","hisrory","background","originalImage","backdrop_path","poster_path","setModalActive","modal","document","querySelector","id","videos","getVideos","movie","length","videSrc","key","setAttribute","innerHTML","classList","toggle","className","backgroundImage","title","overview","push","w500Image","TrailerModal","iframeRef","onClose","current"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport SwiperCore, { Autoplay } from 'swiper';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\n\r\nimport Button, { OutlineButton } from '../button/Button';\r\nimport Modal, { ModalContent } from '../modal/Modal';\r\n\r\nimport tmdbApi, { category, movieType } from '../../api/tmdbApi';\r\nimport apiConfig from '../../api/apiConfig';\r\n\r\nimport './hero-slide.scss';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst HeroSlide = () => {\r\n\r\n    SwiperCore.use([Autoplay]);\r\n\r\n    const [movieItems, setMovieItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getMovies = async () => {\r\n            const params = {page: 1}\r\n            try {\r\n                const response = await tmdbApi.getMoviesList(movieType.popular, {params});\r\n                setMovieItems(response.results.slice(1, 11));\r\n                console.log(response);\r\n            } catch {\r\n                console.log('error');\r\n            }\r\n        }\r\n        getMovies();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"hero-slide\">\r\n            <Swiper\r\n                modules={[Autoplay]}\r\n                grabCursor={true}\r\n                spaceBetween={0}\r\n                slidesPerView={1}\r\n                autoplay={{delay: 3000}}\r\n            >\r\n                {\r\n                    movieItems.map((item, i) => (\r\n                        <SwiperSlide key={i}>\r\n                            {({ isActive }) => (\r\n                                <HeroSlideItem item={item} className={`${isActive ? 'active' : ''}`} />\r\n                            )}\r\n                        </SwiperSlide>\r\n                    ))\r\n                }\r\n            </Swiper>\r\n            {\r\n                movieItems.map((item, i) => <TrailerModal key={i} item={item}/>)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst HeroSlideItem = props => {\r\n\r\n    let hisrory = useHistory();\r\n\r\n    const item = props.item;\r\n\r\n    const background = apiConfig.originalImage(item.backdrop_path ? item.backdrop_path : item.poster_path);\r\n\r\n    const setModalActive = async () => {\r\n        const modal = document.querySelector(`#modal_${item.id}`);\r\n\r\n        const videos = await tmdbApi.getVideos(category.movie, item.id);\r\n\r\n        if (videos.results.length > 0) {\r\n            const videSrc = 'https://www.youtube.com/embed/' + videos.results[0].key;\r\n            modal.querySelector('.modal__content > iframe').setAttribute('src', videSrc);\r\n        } else {\r\n            modal.querySelector('.modal__content').innerHTML = 'No trailer';\r\n        }\r\n\r\n        modal.classList.toggle('active');\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`hero-slide__item ${props.className}`}\r\n            style={{backgroundImage: `url(${background})`}}\r\n        >\r\n            <div className=\"hero-slide__item__content container\">\r\n                <div className=\"hero-slide__item__content__info\">\r\n                    <h2 className=\"title\">{item.title}</h2>\r\n                    <div className=\"overview\">{item.overview}</div>\r\n                    <div className=\"btns\">\r\n                        <Button onClick={() => hisrory.push('/movie/' + item.id)}>\r\n                            Watch now\r\n                        </Button>\r\n                        <OutlineButton onClick={setModalActive}>\r\n                            Watch trailer\r\n                        </OutlineButton>\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero-slide__item__content__poster\">\r\n                    <img src={apiConfig.w500Image(item.poster_path)} alt=\"\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TrailerModal = props => {\r\n    const item = props.item;\r\n\r\n    const iframeRef = useRef(null);\r\n\r\n    const onClose = () => iframeRef.current.setAttribute('src', '');\r\n\r\n    return (\r\n        <Modal active={false} id={`modal_${item.id}`}>\r\n            <ModalContent onClose={onClose}>\r\n                <iframe ref={iframeRef} width=\"100%\" height=\"500px\" title=\"trailer\"></iframe>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default HeroSlide;\r\n"]},"metadata":{},"sourceType":"module"}