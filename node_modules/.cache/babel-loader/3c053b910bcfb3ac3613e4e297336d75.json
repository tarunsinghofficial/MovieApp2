{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-movie\\\\src\\\\components\\\\movie-grid\\\\MovieGrid.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport Button, { OutlineButton } from '../button/Button';\nimport Input from '../input/Input';\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MovieGrid = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n\n      if (keyword === undefined) {\n        const params = {};\n\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            break;\n\n          default:\n            response = await tmdbApi.getTvList(tvType.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n\n      setItems(response.results);\n      setTotalPage(response.total_pages);\n    };\n\n    getList();\n  }, [props.category, keyword]);\n\n  const loadMore = async () => {\n    let response = null;\n\n    if (keyword === undefined) {\n      const params = {\n        page: page + 1\n      };\n\n      switch (props.category) {\n        case category.movie:\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\n            params\n          });\n          break;\n\n        default:\n          response = await tmdbApi.getTvList(tvType.popular, {\n            params\n          });\n      }\n    } else {\n      const params = {\n        page: page + 1,\n        query: keyword\n      };\n      response = await tmdbApi.search(props.category, {\n        params\n      });\n    }\n\n    setItems([...items, ...response.results]);\n    setPage(page + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section mb-3\",\n      children: /*#__PURE__*/_jsxDEV(MovieSearch, {\n        category: props.category,\n        keyword: keyword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        category: props.category,\n        item: item\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 44\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), page < totalPage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid__loadmore\",\n      children: /*#__PURE__*/_jsxDEV(OutlineButton, {\n        className: \"small\",\n        onClick: loadMore,\n        children: \"Load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(MovieGrid, \"gVKJykNS0ZZmAcVWR7yk7gRUMnQ=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieGrid;\n\nconst MovieSearch = props => {\n  _s2();\n\n  const history = useHistory();\n  const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\n  const goToSearch = useCallback(() => {\n    if (keyword.trim().length > 0) {\n      history.push(`/${category[props.category]}/search/${keyword}`);\n    }\n  }, [keyword, props.category, history]);\n  useEffect(() => {\n    const enterEvent = e => {\n      e.preventDefault();\n\n      if (e.keyCode === 13) {\n        goToSearch();\n      }\n    };\n\n    document.addEventListener('keyup', enterEvent);\n    return () => {\n      document.removeEventListener('keyup', enterEvent);\n    };\n  }, [keyword, goToSearch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-search\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Enter keyword\",\n      value: keyword,\n      onChange: e => setKeyword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"small\",\n      onClick: goToSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(MovieSearch, \"I2NExLrNnOoAB+SPN4V+sg7kpxQ=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = MovieSearch;\nexport default MovieGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MovieGrid\");\n$RefreshReg$(_c2, \"MovieSearch\");","map":{"version":3,"sources":["D:/react-movie/src/components/movie-grid/MovieGrid.jsx"],"names":["React","useState","useEffect","useCallback","useHistory","useParams","MovieCard","Button","OutlineButton","Input","tmdbApi","category","movieType","tvType","MovieGrid","props","items","setItems","page","setPage","totalPage","setTotalPage","keyword","getList","response","undefined","params","movie","getMoviesList","upcoming","getTvList","popular","query","search","results","total_pages","loadMore","map","item","i","MovieSearch","history","setKeyword","goToSearch","trim","length","push","enterEvent","e","preventDefault","keyCode","document","addEventListener","removeEventListener","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\n\r\nimport './movie-grid.scss';\r\n\r\nimport MovieCard from '../movie-card/MovieCard';\r\nimport Button, { OutlineButton } from '../button/Button';\r\nimport Input from '../input/Input'\r\n\r\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\r\n\r\nconst MovieGrid = props => {\r\n\r\n    const [items, setItems] = useState([]);\r\n\r\n    const [page, setPage] = useState(1);\r\n    const [totalPage, setTotalPage] = useState(0);\r\n\r\n    const { keyword } = useParams();\r\n\r\n    useEffect(() => {\r\n        const getList = async () => {\r\n            let response = null;\r\n            if (keyword === undefined) {\r\n                const params = {};\r\n                switch(props.category) {\r\n                    case category.movie:\r\n                        response = await tmdbApi.getMoviesList(movieType.upcoming, {params});\r\n                        break;\r\n                    default:\r\n                        response = await tmdbApi.getTvList(tvType.popular, {params});\r\n                }\r\n            } else {\r\n                const params = {\r\n                    query: keyword\r\n                }\r\n                response = await tmdbApi.search(props.category, {params});\r\n            }\r\n            setItems(response.results);\r\n            setTotalPage(response.total_pages);\r\n        }\r\n        getList();\r\n    }, [props.category, keyword]);\r\n\r\n    const loadMore = async () => {\r\n        let response = null;\r\n        if (keyword === undefined) {\r\n            const params = {\r\n                page: page + 1\r\n            };\r\n            switch(props.category) {\r\n                case category.movie:\r\n                    response = await tmdbApi.getMoviesList(movieType.upcoming, {params});\r\n                    break;\r\n                default:\r\n                    response = await tmdbApi.getTvList(tvType.popular, {params});\r\n            }\r\n        } else {\r\n            const params = {\r\n                page: page + 1,\r\n                query: keyword\r\n            }\r\n            response = await tmdbApi.search(props.category, {params});\r\n        }\r\n        setItems([...items, ...response.results]);\r\n        setPage(page + 1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"section mb-3\">\r\n                <MovieSearch category={props.category} keyword={keyword}/>\r\n            </div>\r\n            <div className=\"movie-grid\">\r\n                {\r\n                    items.map((item, i) => <MovieCard category={props.category} item={item} key={i}/>)\r\n                }\r\n            </div>\r\n            {\r\n                page < totalPage ? (\r\n                    <div className=\"movie-grid__loadmore\">\r\n                        <OutlineButton className=\"small\" onClick={loadMore}>Load more</OutlineButton>\r\n                    </div>\r\n                ) : null\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nconst MovieSearch = props => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\r\n\r\n    const goToSearch = useCallback(\r\n        () => {\r\n            if (keyword.trim().length > 0) {\r\n                history.push(`/${category[props.category]}/search/${keyword}`);\r\n            }\r\n        },\r\n        [keyword, props.category, history]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const enterEvent = (e) => {\r\n            e.preventDefault();\r\n            if (e.keyCode === 13) {\r\n                goToSearch();\r\n            }\r\n        }\r\n        document.addEventListener('keyup', enterEvent);\r\n        return () => {\r\n            document.removeEventListener('keyup', enterEvent);\r\n        };\r\n    }, [keyword, goToSearch]);\r\n\r\n    return (\r\n        <div className=\"movie-search\">\r\n            <Input\r\n                type=\"text\"\r\n                placeholder=\"Enter keyword\"\r\n                value={keyword}\r\n                onChange={(e) => setKeyword(e.target.value)}\r\n            />\r\n            <Button className=\"small\" onClick={goToSearch}>Search</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieGrid;\r\n"]},"metadata":{},"sourceType":"module"}